jenkins:
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "admin"
        - id: "dev"
          password: "dev"
  # authorizationStrategy: loggedInUsersCanDoAnything
  authorizationStrategy:
    globalMatrix:
      permissions:
        - "Job/Build:dev"
        - "Job/Cancel:dev"
        - "Job/Read:dev"
        - "Job/Workspace:dev"
        - "Overall/Administer:admin"
        - "Overall/Read:authenticated"
        - "Run/Replay:dev"
        - "Run/Update:dev"
  numExecutors: 1

# Setting up Agent 
  nodes:
    - permanent:
        labelString: "Prod1"
        mode: NORMAL
        name: "Prod1"
        numExecutors: 1
        remoteFS: "/home/ubuntu/jenkins_agent"
        launcher:
          SSHLauncher:
            host: '<prod1_ip>'
            port: 22
            credentialsId: ssh-Jenkins-Controller
            launchTimeoutSeconds: 60
            maxNumRetries: 3
            retryWaitTime: 30
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false
    - permanent:
        labelString: "prod2_ip"
        mode: NORMAL
        name: "Prod2"
        numExecutors: 1
        remoteFS: "/home/ubuntu/jenkins_agent"
        launcher:
          SSHLauncher:
            host: '<prod2_ip>'
            port: 22
            credentialsId: ssh-Jenkins-Controller
            launchTimeoutSeconds: 60
            maxNumRetries: 3
            retryWaitTime: 30
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false

# Set up credentials
credentials:
  system:
    domainCredentials:
      - credentials:
          - basicSSHUserPrivateKey:
              scope: GLOBAL
              id: "ssh-Jenkins-Controller"
              username: ubuntu
              description: "SSH passphrase with private key file. Private key provided"
              privateKeySource:
                directEntry:
                  privateKey: "${readFile:${SSH_PRIVATE_FILE_PATH}}"
          - basicSSHUserPrivateKey:
              scope: GLOBAL
              id: "ssh-GitHub"
              username: Inframous
              description: "SSH Private Key for Git (Same one)"
              privateKeySource:
                directEntry:
                  privateKey: "${readFile:${SSH_PRIVATE_FILE_PATH}}"
          - aws:
              scope: GLOBAL
              id: "aws-Jenkins-Controller"
              accessKey: "${AWS_ACCESS_KEY}"
              secretKey: "${AWS_SECRET_ACCESS_KEY}"
              description: "AWS Credentials"
jobs:
  - script: >
        pipeline {
          agent any

          stages {
            stage('Download pipeline files') {
              steps {
                // Define GitHub credentials
                def githubCredentials = credentials('ssh-GitHub')

                // Define GitHub repository URL and branch
                def githubRepoUrl = 'git@github.com:Inframous/project_1.git'
                def githubRepoBranch = 'main'

                // Define pipeline file paths
                def pipelineFile1Path = 'infrastructure/pipeline/aws-test-done'
                def pipelineFile2Path = 'infrastructure/pipeline/aws-deploy-done'

                // Define job names
                def job1Name = 'AWS-Test'
                def job2Name = 'AWS-Deploy'

                // Define DSL job builders for each pipeline file
                def job1Builder = new DslScriptLoader().loadScript(pipelineFile1Path).with{ it ->
                  it.setVariable('jobName', job1Name)
                  it
                }

                def job2Builder = new DslScriptLoader().loadScript(pipelineFile2Path).with{ it ->
                  it.setVariable('jobName', job2Name)
                  it
                }

                // Clone GitHub repository
                git url: githubRepoUrl, credentialsId: githubCredentials.id, branch: githubRepoBranch

                // Load DSL job builders from pipeline files
                job1Builder = job1Builder.fromGithub(githubRepoUrl, githubRepoBranch, githubCredentials)
                job2Builder = job2Builder.fromGithub(githubRepoUrl, githubRepoBranch, githubCredentials)

              }
            }

            stage('Create jobs') {
              steps {
                // Create Job 1
                jobDsl scriptText: job1Builder.generate()

                // Create Job 2
                jobDsl scriptText: job2Builder.generate()
              }
            }
          }
        }