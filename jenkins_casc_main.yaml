jenkins:
  systemMessage: "Welcome to your new Jenkins Controller, ejnoy!"
  numExecutors: 0
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "password"
        - id: "dev"
          password: "password"
        - id: "dev2"
          password: "password"

  authorizationStrategy:
    roleBased:
      roles:
        global:
          - name: "admin"
            description: "Jenkins administrators"
            permissions:
              - "Overall/Administer"
            assignments:
              - "admin"
          - name: "Authenticated_Devs"
            description: "Authenticated Devs"
            permissions:
              - "Overall/Read"
              - "Job/Read"
              - "Job/Configure"
              - "Job/Build"
              - "Job/Workspace"
              - "Agent/Build"
              - "Agent/Connect"
              - "Agent/Build"
              - "Agent/Disconnect"

            assignments:
              - "authenticated"

# Setting up Agents 
  nodes:
    - permanent:
        labelString: "Prod1 prod"
        mode: NORMAL
        name: "Prod1"
        numExecutors: 1
        remoteFS: "/home/ubuntu/agent_prod1"
        launcher:
          ssh:
            host: '<prod1_ip>'
            port: 22
            credentialsId: ssh-Master-Controller
            launchTimeoutSeconds: 60
            maxNumRetries: 3
            retryWaitTime: 30
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false
    - permanent:
        labelString: "Prod2 prod"
        mode: NORMAL
        name: "Prod2"
        numExecutors: 1
        remoteFS: "/home/ubuntu/agent_prod2"
        launcher:
          ssh:
            host: '<prod2_ip>'
            port: 22
            credentialsId: ssh-Master-Controller
            launchTimeoutSeconds: 60
            maxNumRetries: 3
            retryWaitTime: 30
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false
    - permanent:
        labelString: "J_Agent j_agent"
        mode: NORMAL
        name: "J_Agent"
        numExecutors: 1
        remoteFS: "/home/ubuntu/j_agent"
        launcher:
          ssh:
            host: '<j_agnet_ip>'
            port: 22
            credentialsId: ssh-Master-Controller
            launchTimeoutSeconds: 60
            maxNumRetries: 3
            retryWaitTime: 30
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false


## Testing this block

unclassified:
  location:
    adminAddress: "EMAIL_ADDRESS"
    url: "<CONTROLLER_IP>"

## End block
security:
  scriptApproval:
    approvedScriptHashes:
      - "4b9b98be2b95adc41e51a9da66fbac96eed3f92877a0633c12f9049ce68e2c1d67e3fe6aa0985a6dd5c233ba447c2e246a972860d762b6b246f958e8d850c340"
      - "1fc3571ba10dc8f4f0294a299adb5f23c40c042cdfd0c4f82c583d8d37c6da8d8d73b40722b084d8c8a9be648116e3efba1f5a0520f807d1c3f2d1a622686e15"




# Set up credentials
credentials:
  system:
    domainCredentials:
      - credentials:
          - basicSSHUserPrivateKey:
              scope: GLOBAL
              id: "ssh-Master-Controller"
              username: ubuntu
              description: "SSH passphrase with private key file. Private key provided"
              privateKeySource:
                directEntry:
                  privateKey: "${readFile:${SSH_PRIVATE_FILE_PATH}}"
          - basicSSHUserPrivateKey:
              scope: GLOBAL
              id: "ssh-GitHub"
              username: Inframous
              description: "SSH Private Key for Git (Same one)"
              privateKeySource:
                directEntry:
                  privateKey: "${readFile:${SSH_PRIVATE_FILE_PATH}}"
          - aws:
              scope: GLOBAL
              id: "aws-Master-Controller"
              accessKey: "${AWS_ACCESS_KEY}"
              secretKey: "${AWS_SECRET_ACCESS_KEY}"
              description: "AWS Credentials"


jobs:
  - file: /usr/share/jenkins/casc_files/pipelines/import_depInfra.groovy
  - file: /usr/share/jenkins/casc_files/pipelines/import_desInfra.groovy

